library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;


entity controlUnit is
    Generic(
        numInterrupts : integer := 5
    );

    Port(
        enable              : in std_logic;
        hardwareReset       : in std_logic;
        softwareReset       : out std_logic;
        clk                 : in std_logic;
        alteredClock        : in std_logic;

        --control signals generated by CU
        operand1Sel         : out std_logic_vector(4 downto 0);
        operand2Sel         : out std_logic_vector(4 downto 0); 

        dataToRegistersSel  : out std_logic;
        loadRegistersSel    : out std_logic_vector(15 downto 0);

        bitManipulationCode : out std_logic_vector(1 downto 0);
        bitManipulationValue: out std_logic_vector(4 downto 0);

        opCode              : out std_logic_vector(3 downto 0);
        carryIn             : out std_logic;
        upperSel            : out std_logic;

        clearInterrupts     : out std_logic_vector(numInterrupts-1 downto 0);
          
        --signals controlling the CU
        programmingMode     : in std_logic;
        IVT_address         : in std_logic_vector(31 downto 0);
        PC                  : in std_logic_vector(31 downto 0);
        flagsCPSR           : in std_logic_vector(3 downto 0);
        memOpFinished       : in std_logic;

        --debug signals
        debug : out std_logic_vector(49 downto 0)
);
end controlUnit;

architecture Behavioral of controlUnit is
    type procStateType      is (SETUP, FETCH1, FETCH2, DECODE_EXECUTE);
    type executeStateType   is (DECODE_EXECUTE1, DECODE_EXECUTE2 ,DECODE_EXECUTE3, DECODE_EXECUTE4, DECODE_EXECUTE5, DECODE_EXECUTE6);

    signal procState        : procStateType    := SETUP;
    signal procState_nxt    : procStateType;

    signal executeState     : executeStateType := DECODE_EXECUTE1;
    signal executeState_nxt : executeStateType;

    --internal registers
    signal currentlyHandlingInterruptRegister : std_logic;
    signal instructionRegister                : std_logic_vector(31 downto 0);
    signal CPSR_Register                      : std_logic_vector(3 downto 0);

    signal Z_flag : std_logic;
    signal N_flag : std_logic;
    signal V_flag : std_logic;
    signal C_flag : std_logic; 


begin
    Z_flag <= CPSR_Register(3);
    N_flag <= CPSR_Register(2);
    V_flag <= CPSR_Register(1);
    c_flag <= CPSR_Register(0);

    --setting signals
    process(procState, executeState)
    begin
        null;
    end process;


    --updating registers
    process(clk, hardwareReset)
    begin
        if hardwareReset = '1' then
            procState       <= SETUP;
            executeState    <= DECODE_EXECUTE1;
            
        elsif rising_edge(clk) then
            if enable = '1' then
                if alteredClock = '1' then
                    procState       <= procState_nxt;
                    executeState    <= executeState_nxt;

                end if;
            end if;
        end if;

    end process;


end Behavioral;
