library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity CPU_Core is
  Port (
    enable           : in std_logic;
    hardwareReset    : in std_logic;
    clk              : in std_logic;
    alteredClock     : in std_logic;

    programmingMode  : in std_logic;

    dataIn           : in std_logic_vector(31 downto 0);
    dataOut          : out std_logic_vector(31 downto 0);
    addressOut       : out std_logic_vector(31 downto 0);
    
    readEn           : out std_logic;
    writeEn          : out std_logic;
    softwareReset    : out std_logic;
    memOpFinished    : in std_logic;

    IVT_address      : in std_logic_vector(31 downto 0);

    --debugging
    debug            : out std_logic_vector(31 downto 0);
   );
end CPU_Core;

architecture Behavioral of CPU_Core is
    component ALU is
        port (
            operand1             : in std_logic_vector(31 downto 0);
            operand2             : in std_logic_vector(31 downto 0);
    
            bitManipulationCode  : in std_logic_vector(1 downto 0);
            bitManipulationValue : in std_logic_vector(4 downto 0);
    
            opCode               : in std_logic_vector(3 downto 0);
            carryIn              : in std_logic;
            
            upperSel             : in std_logic;
    
            --outputs
            result               : out std_logic_vector(31 downto 0);
            flagsCPSR            : out std_logic_vector(3 downto 0);
            debug                : out std_logic_vector(99 downto 0)   
         );
    end component;

    component registerFile is
        port(
            enable           : in std_logic;
            reset            : in std_logic;
            clk              : in std_logic;
            alteredClock     : in std_logic;
    
            dataIn           : in std_logic_vector(31 downto 0);
            loadRegistersSel : in std_logic_vector(15 downto 0);
            dataOut          : out std_logic_vector(16 * 32-1 downto 0)
        );
    end component;

    component busManagement is
        Port ( 
              dataFromRegisters   : in std_logic_vector(16 * 32-1 downto 0);
              dataFromCU          : in std_logic_vector(31 downto 0);
              dataFromALU         : in std_logic_vector(31 downto 0);
              dataFromMem         : in std_logic_vector(31 downto 0);
      
              operand1            : out std_logic_vector(31 downto 0);
              operand2            : out std_logic_vector(31 downto 0);
      
              operand1Sel         : in std_logic_vector(4 downto 0);
              operand2Sel         : in std_logic_vector(4 downto 0); 
      
              dataToRegisters     : out std_logic_vector(31 downto 0);
      
              dataToRegistersSel  : in std_logic
        );
    end component;

    component controlUnit is
        Port(
            enable              : in std_logic;
            hardwareReset       : in std_logic;
            softwareReset       : out std_logic;
            clk                 : in std_logic;
            alteredClock        : in std_logic;

            --control signals generated by CU
            operand1Sel         : out std_logic_vector(4 downto 0);
            operand2Sel         : out std_logic_vector(4 downto 0); 

            dataToRegistersSel  : out std_logic;
            loadRegistersSel    : out std_logic_vector(15 downto 0);

            bitManipulationCode : out std_logic_vector(1 downto 0);
            bitManipulationValue: out std_logic_vector(4 downto 0);

            opCode              : out std_logic_vector(3 downto 0);
            carryIn             : out std_logic;
            upperSel            : out std_logic;

            --signals controlling the CU
            programmingMode     : in std_logic;
            IVT_address         : in std_logic_vector(31 downto 0);
            PC_address          : in std_logic_vector(31 downto 0);
            flagsCPSR           : in std_logic_vector(3 downto 0);
            memOpFinished       : in std_logic;

            --debug signals
            debug : out std_logic_vector(x downto 0);
        );
    end component;

    --internal signals
    --ALU
    signal operand1 : std_logic_vector(31 downto 0);
    signal operand2 : std_logic_vector(31 downto 0);
    signal bitManipulationCode : std_logic_vector(1 downto 0);
    signal bitManipulationValue : std_logic_vector(4 downto 0);
    signal opCode : std_logic_vector(3 downto 0);
    signal carryIn : std_logic;
    signal upperSel : std_logig;
    
    --register file
    signal dataToRegisters  : std_logic_vector(31 downto 0);
    signal loadRegistersSel : std_logic_vector(15 downto 0);

    --bus management
    signal dataFromRegisters   : std_logic_vector(16 * 32-1 downto 0);
    signal dataFromCU          : std_logic_vector(31 downto 0);
    signal dataFromALU         : std_logic_vector(31 downto 0);
    signal dataFromMem         : std_logic_vector(31 downto 0);
    signal operand1Sel         : std_logic_vector(4 downto 0);
    signal operand2Sel         : std_logic_vector(4 downto 0); 
    signal dataToRegistersSel  : std_logic;

    --CU
    signal ALU_flags  : std_logic_vector(3 downto 0);

    --debug signals
    signal ALU_debug : std_logic_vector(99 downto 0);
    signal CU_debug  : std_logic_vector(x downto 0);

    --others
    signal reset         : std_logic;
    signal softwareReset : std_logic;

begin
    reset <= hardwareReset or softwareReset;
    dataFromMen <= dataIn;

    ALU : ALU
        port map(
            operand1                => operand1,          
            operand2                => operand2,             
    
            bitManipulationCode     => bitManipulationCode,
            bitManipulationValue    => bitManipulationValue,
    
            opCode                  => opCode,
            carryIn                 => carryIn,
            
            upperSel                => upperSel,        
    
            --outputs
            result                  => dataFromALU,
            flagsCPSR               => ALU_flags,
            debug                   => ALU_debug
        );

    RegisterFile : registerFile
        port map(
            enable              => enable,     
            reset               => reset,
            clk                 => clk,
            alteredClock        => alteredClock
    
            dataIn              => dataToRegisters,
            loadRegistersSel    => loadRegistersSel,
            dataOut             => dataFromRegisters
        )

    busManagement : busManagement
        port map(
            dataFromRegisters       => dataFromRegisters,
            dataFromCU              => dataFromCU,
            dataFromALU             => dataFromALU,
            dataFromMem             => dataFromMen,

            operand1                => operand1,            
            operand2                => operand2,
      
            operand1Sel             => operand1Sel,
            operand2Sel             => operand2Sel,

            dataToRegisters         => dataToRegisters
      
            dataToRegistersSel      => dataToRegistersSel,
        )

    CU : controlUnit
        port map(

        )
        

end Behavioral;
